//
// SoundAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SoundAPI: APIBase {
    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFavorites(completion: @escaping ((_ data: [FavoriteChannel]?, _ error: ErrorResponse?) -> Void)) {
        getFavoritesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos/favorites

     - examples: [{contentType=application/json, example=[ {
  "albumArtURI" : "albumArtURI",
  "title" : "title",
  "uri" : "uri"
}, {
  "albumArtURI" : "albumArtURI",
  "title" : "title",
  "uri" : "uri"
} ]}]
     - returns: RequestBuilder<[FavoriteChannel]> 
     */
    open class func getFavoritesWithRequestBuilder() -> RequestBuilder<[FavoriteChannel]> {
        let path = "/sonos/favorites"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[FavoriteChannel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlayLists(completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getPlayListsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - GET /sonos/playLists

     - returns: RequestBuilder<Void> 
     */
    open class func getPlayListsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/sonos/playLists"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlayerVolume(playerId: String, completion: @escaping ((_ data: Int32?, _ error: ErrorResponse?) -> Void)) {
        getPlayerVolumeWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos/{playerId}/volume
     - gets player volume

     - examples: [{contentType=application/json, example=0}]
     - parameter playerId: (path)  
     - returns: RequestBuilder<Int32> 
     */
    open class func getPlayerVolumeWithRequestBuilder(playerId: String) -> RequestBuilder<Int32> {
        var path = "/sonos/{playerId}/volume"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter updown
     */
    public enum Updown_incrementVolume: Int32 { 
        case number1 = -1
        case _1 = 1
    }

    /**
     - parameter playerId: (path)  
     - parameter updown: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func incrementVolume(playerId: String, updown: Updown_incrementVolume, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        incrementVolumeWithRequestBuilder(playerId: playerId, updown: updown).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/incrementVolume/{updown}
     - incremental player volume

     - parameter playerId: (path)  
     - parameter updown: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func incrementVolumeWithRequestBuilder(playerId: String, updown: Updown_incrementVolume) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/incrementVolume/{updown}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let updownPreEscape = "\(updown.rawValue)"
        let updownPostEscape = updownPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{updown}", with: updownPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nextTrack(playerId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        nextTrackWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/next
     - move to next track

     - parameter playerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func nextTrackWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/next"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pausePlayer(playerId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        pausePlayerWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/pause
     - pause a player

     - parameter playerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func pausePlayerWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/pause"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter favorite: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func playFavorite(playerId: String, favorite: FavoriteChannel, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        playFavoriteWithRequestBuilder(playerId: playerId, favorite: favorite).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/favorites

     - parameter playerId: (path)  
     - parameter favorite: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func playFavoriteWithRequestBuilder(playerId: String, favorite: FavoriteChannel) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/favorites"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = favorite.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func playerStatus(playerId: String, completion: @escaping ((_ data: SoundZoneStatus?, _ error: ErrorResponse?) -> Void)) {
        playerStatusWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos/{playerId}

     - examples: [{contentType=application/json, example={
  "address" : "address",
  "currentTrack" : {
    "duration" : 0,
    "radioShowMeta" : "radioShowMeta",
    "artist" : "artist",
    "album" : "album",
    "albumArtURI" : "albumArtURI",
    "streamInfo" : "streamInfo",
    "title" : "title",
    "type" : "type",
    "uri" : "uri"
  },
  "nextTrack" : {
    "artist" : "artist",
    "albumArtURI" : "albumArtURI",
    "album" : "album",
    "title" : "title",
    "uri" : "uri"
  },
  "mute" : true,
  "trackNo" : 5,
  "volume" : 6,
  "stateTime" : 5,
  "name" : "name",
  "currentPlayMode" : "currentPlayMode",
  "id" : "id",
  "currentState" : "currentState",
  "status" : "status",
  "relTime" : 1
}}]
     - parameter playerId: (path)  
     - returns: RequestBuilder<SoundZoneStatus> 
     */
    open class func playerStatusWithRequestBuilder(playerId: String) -> RequestBuilder<SoundZoneStatus> {
        var path = "/sonos/{playerId}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SoundZoneStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

    return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func previousTrack(playerId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        previousTrackWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/back
     - move to previous track

     - parameter playerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func previousTrackWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/back"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resumePlayer(playerId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        resumePlayerWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/resume
     - resume a player

     - parameter playerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func resumePlayerWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/resume"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter volume: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setPlayerVolume(playerId: String, volume: Int32, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setPlayerVolumeWithRequestBuilder(playerId: playerId, volume: volume).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/volume/{volume}
     - sets player volume

     - parameter playerId: (path)  
     - parameter volume: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func setPlayerVolumeWithRequestBuilder(playerId: String, volume: Int32) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/volume/{volume}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let volumePreEscape = "\(volume)"
        let volumePostEscape = volumePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{volume}", with: volumePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter playerId: (path)  
     - parameter minutes: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sleepPlayer(playerId: String, minutes: Int32, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        sleepPlayerWithRequestBuilder(playerId: playerId, minutes: minutes).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}/sleep/{minutes}
     - puts a player to sleep

     - parameter playerId: (path)  
     - parameter minutes: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func sleepPlayerWithRequestBuilder(playerId: String, minutes: Int32) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/sleep/{minutes}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let minutesPreEscape = "\(minutes)"
        let minutesPostEscape = minutesPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minutes}", with: minutesPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func soundSummary(completion: @escaping ((_ data: [SoundZoneStatus]?, _ error: ErrorResponse?) -> Void)) {
        soundSummaryWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos

     - examples: [{contentType=application/json, example=[ {
  "address" : "address",
  "currentTrack" : {
    "duration" : 0,
    "radioShowMeta" : "radioShowMeta",
    "artist" : "artist",
    "album" : "album",
    "albumArtURI" : "albumArtURI",
    "streamInfo" : "streamInfo",
    "title" : "title",
    "type" : "type",
    "uri" : "uri"
  },
  "nextTrack" : {
    "artist" : "artist",
    "albumArtURI" : "albumArtURI",
    "album" : "album",
    "title" : "title",
    "uri" : "uri"
  },
  "mute" : true,
  "trackNo" : 5,
  "volume" : 6,
  "stateTime" : 5,
  "name" : "name",
  "currentPlayMode" : "currentPlayMode",
  "id" : "id",
  "currentState" : "currentState",
  "status" : "status",
  "relTime" : 1
}, {
  "address" : "address",
  "currentTrack" : {
    "duration" : 0,
    "radioShowMeta" : "radioShowMeta",
    "artist" : "artist",
    "album" : "album",
    "albumArtURI" : "albumArtURI",
    "streamInfo" : "streamInfo",
    "title" : "title",
    "type" : "type",
    "uri" : "uri"
  },
  "nextTrack" : {
    "artist" : "artist",
    "albumArtURI" : "albumArtURI",
    "album" : "album",
    "title" : "title",
    "uri" : "uri"
  },
  "mute" : true,
  "trackNo" : 5,
  "volume" : 6,
  "stateTime" : 5,
  "name" : "name",
  "currentPlayMode" : "currentPlayMode",
  "id" : "id",
  "currentState" : "currentState",
  "status" : "status",
  "relTime" : 1
} ]}]
     - returns: RequestBuilder<[SoundZoneStatus]> 
     */
    open class func soundSummaryWithRequestBuilder() -> RequestBuilder<[SoundZoneStatus]> {
        let path = "/sonos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SoundZoneStatus]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
