//
// SystemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SystemAPI: APIBase {
    /**
     Immediately executes or cancels completion of a running item
     - parameter itemId: (path)  
     - parameter execute: (query) if &#x60;true&#x60;, will execute the completion operation, if one is defined (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelRunningItem(itemId: String, execute: Bool? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        cancelRunningItemWithRequestBuilder(itemId: itemId, execute: execute).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Immediately executes or cancels completion of a running item
     - DELETE /schedule/running/{itemId}

     - parameter itemId: (path)  
     - parameter execute: (query) if &#x60;true&#x60;, will execute the completion operation, if one is defined (optional, default to true)
     - returns: RequestBuilder<Void> 
     */
    open class func cancelRunningItemWithRequestBuilder(itemId: String, execute: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/schedule/running/{itemId}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "execute": execute
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter job: (body) the job description to execute (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func executeJob(job: AdHocJob? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        executeJobWithRequestBuilder(job: job).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /job/execute
     - Executes an ad-hoc job

     - parameter job: (body) the job description to execute (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func executeJobWithRequestBuilder(job: AdHocJob? = nil) -> RequestBuilder<Void> {
        let path = "/job/execute"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = job?.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Returns a specific running item
     - parameter itemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRunningItem(itemId: String, completion: @escaping ((_ data: RunningItem?, _ error: ErrorResponse?) -> Void)) {
        getRunningItemWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a specific running item
     - GET /schedule/running/{itemId}

     - examples: [{contentType=application/json, example={ }}]
     - parameter itemId: (path)  
     - returns: RequestBuilder<RunningItem> 
     */
    open class func getRunningItemWithRequestBuilder(itemId: String) -> RequestBuilder<RunningItem> {
        var path = "/schedule/running/{itemId}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunningItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRunningItems(completion: @escaping ((_ data: RunningItem?, _ error: ErrorResponse?) -> Void)) {
        getRunningItemsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /schedule/running
     - Returns scheduled items currently being executed

     - examples: [{contentType=application/json, example={ }}]
     - returns: RequestBuilder<RunningItem> 
     */
    open class func getRunningItemsWithRequestBuilder() -> RequestBuilder<RunningItem> {
        let path = "/schedule/running"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunningItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSchedule(completion: @escaping ((_ data: Schedule?, _ error: ErrorResponse?) -> Void)) {
        getScheduleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /schedule
     - Returns schedule information across the entire system

     - examples: [{contentType=application/json, example={
  "finally" : [ "{}", "{}" ],
  "until" : "{}",
  "id" : "id",
  "then" : [ "{}", "{}" ],
  "when" : [ "{}", "{}" ]
}}]
     - returns: RequestBuilder<Schedule> 
     */
    open class func getScheduleWithRequestBuilder() -> RequestBuilder<Schedule> {
        let path = "/schedule"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Schedule>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the system state
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemState(completion: @escaping ((_ data: [String:String]?, _ error: ErrorResponse?) -> Void)) {
        getSystemStateWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the system state
     - GET /state
     - Returns the entire system state

     - examples: [{contentType=application/json, example={
  "key" : ""
}}]
     - returns: RequestBuilder<[String:String]> 
     */
    open class func getSystemStateWithRequestBuilder() -> RequestBuilder<[String:String]> {
        let path = "/state"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_setSystemState: String { 
        case notify = "notify"
        case disabled = "disabled"
    }

    /**
     Sets the system state
     - parameter state: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSystemState(state: State_setSystemState, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setSystemStateWithRequestBuilder(state: state).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Sets the system state
     - POST /state
     - Sets the system to the specified state

     - parameter state: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func setSystemStateWithRequestBuilder(state: State_setSystemState) -> RequestBuilder<Void> {
        let path = "/state"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "state": state.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter itemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func triggerItem(itemId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        triggerItemWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - PUT /schedule/running/{itemId}
     - Forces an item to run

     - parameter itemId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func triggerItemWithRequestBuilder(itemId: String) -> RequestBuilder<Void> {
        var path = "/schedule/running/{itemId}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
