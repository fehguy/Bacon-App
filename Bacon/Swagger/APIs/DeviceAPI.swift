//
// DeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


public class DeviceAPI: APIBase {
    /**
     Returns all devices in the system
     - parameter deviceType: (query) Supply a string or substring to match against &#x60;deviceType&#x60;, &#x60;device.id&#x60;, or &#x60;device.name&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevices(deviceType: String? = nil, completion: @escaping ((_ data: [Device]?, _ error: ErrorResponse?) -> Void)) {
        getDevicesWithRequestBuilder(deviceType: deviceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns all devices in the system
     - GET /devices
     - Returns all registered devices.  Make this call to see what is in the system and use those addresses for connectivity.

     - examples: [{contentType=application/json, example=[ {
  "addedAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "Office",
  "id" : "sonos-controller",
  "type" : "sonos-controller",
  "deviceId" : "A0:99:9B:09:C9:BF",
  "url" : "http://10.0.0.75",
  "token" : "48ba5450-8397-11e6-b5af-13d7283b18cf"
}, {
  "addedAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "Office",
  "id" : "sonos-controller",
  "type" : "sonos-controller",
  "deviceId" : "A0:99:9B:09:C9:BF",
  "url" : "http://10.0.0.75",
  "token" : "48ba5450-8397-11e6-b5af-13d7283b18cf"
} ]}]
     - parameter deviceType: (query) Supply a string or substring to match against &#x60;deviceType&#x60;, &#x60;device.id&#x60;, or &#x60;device.name&#x60; (optional)
     - returns: RequestBuilder<[Device]> 
     */
    open class func getDevicesWithRequestBuilder(deviceType: String? = nil) -> RequestBuilder<[Device]> {
        let path = "/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceType": deviceType
        ])

        let requestBuilder: RequestBuilder<[Device]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sends a notification to one or many devices
     - parameter devices: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notifyDevices(devices: [DeviceNotification], completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        notifyDevicesWithRequestBuilder(devices: devices).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Sends a notification to one or many devices
     - POST /devices/notify
     - A notification is a semi-structure object which contains a `host` and payload.  The keyword `ALL` is reserved for sending a single notification to all registered devices in the network. 

     - parameter devices: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func notifyDevicesWithRequestBuilder(devices: [DeviceNotification]) -> RequestBuilder<Void> {
        let path = "/devices/notify"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = devices.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Registers a device
     - parameter device: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerDevice(device: DeviceRegistrationInfo, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        registerDeviceWithRequestBuilder(device: device).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Registers a device
     - POST /devices/register
     - Devices are expected to periodically re-register with the controller.  If they do not report back, they will be purged from the network and become unavailable to clients.  There  is no harm in re-registering multiple times. 

     - parameter device: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func registerDeviceWithRequestBuilder(device: DeviceRegistrationInfo) -> RequestBuilder<Void> {
        let path = "/devices/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = device.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setDefaultZone(playerId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        setDefaultZoneWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - POST /sonos/{playerId}

     - parameter playerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func setDefaultZoneWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     updates the device
     - parameter delay: (query) specify a time delay, in minutes, before updating (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDevice(delay: Int32? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        updateDeviceWithRequestBuilder(delay: delay).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     updates the device
     - POST /device/update

     - parameter delay: (query) specify a time delay, in minutes, before updating (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateDeviceWithRequestBuilder(delay: Int32? = nil) -> RequestBuilder<Void> {
        let path = "/device/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "delay": delay?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
