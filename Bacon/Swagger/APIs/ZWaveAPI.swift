//
// ZWaveAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ZWaveAPI: APIBase {
    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forceUpdate(completion: @escaping ((_ data: ApiResponse?, _ error: ErrorResponse?) -> Void)) {
        forceUpdateWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/forceUpdate

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func forceUpdateWithRequestBuilder() -> RequestBuilder<ApiResponse> {
        let path = "/lighting/forceUpdate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLightingSummary(completion: @escaping ((_ data: LightingSummary?, _ error: ErrorResponse?) -> Void)) {
        getLightingSummaryWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /lightingSummary

     - examples: [{contentType=application/json, example={
  "zoneStatus" : [ {
    "rooms" : [ "rooms", "rooms" ],
    "level" : 0,
    "zone" : "basement",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Living Room",
    "id" : "living-room"
  }, {
    "rooms" : [ "rooms", "rooms" ],
    "level" : 0,
    "zone" : "basement",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Living Room",
    "id" : "living-room"
  } ],
  "zones" : [ {
    "deviceType" : "dimmer",
    "rooms" : [ "rooms", "rooms" ],
    "zone" : "basement",
    "name" : "Living Room",
    "id" : "living-room",
    "deviceId" : 34
  }, {
    "deviceType" : "dimmer",
    "rooms" : [ "rooms", "rooms" ],
    "zone" : "basement",
    "name" : "Living Room",
    "id" : "living-room",
    "deviceId" : 34
  } ]
}}]
     - returns: RequestBuilder<LightingSummary> 
     */
    open class func getLightingSummaryWithRequestBuilder() -> RequestBuilder<LightingSummary> {
        let path = "/lightingSummary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LightingSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter deviceId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSwitchState(deviceId: String, completion: @escaping ((_ data: DeviceState?, _ error: ErrorResponse?) -> Void)) {
        getSwitchStateWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /lighting/switches/{deviceId}

     - examples: [{contentType=application/json, example={
  "level" : 0,
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "id" : "fishtank-light"
}}]
     - parameter deviceId: (path)  
     - returns: RequestBuilder<DeviceState> 
     */
    open class func getSwitchStateWithRequestBuilder(deviceId: String) -> RequestBuilder<DeviceState> {
        var path = "/lighting/switches/{deviceId}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceState>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setDimmer(deviceId: String, value: Int32, completion: @escaping ((_ data: ApiResponse?, _ error: ErrorResponse?) -> Void)) {
        setDimmerWithRequestBuilder(deviceId: deviceId, value: value).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/dimmers/{deviceId}/{value}

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func setDimmerWithRequestBuilder(deviceId: String, value: Int32) -> RequestBuilder<ApiResponse> {
        var path = "/lighting/dimmers/{deviceId}/{value}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter units
     */
    public enum Units_setDimmerTimer: String { 
        case seconds = "seconds"
        case minutes = "minutes"
        case milliseconds = "milliseconds"
    }

    /**
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setDimmerTimer(deviceId: String, value: Int32, duration: Int32, units: Units_setDimmerTimer? = nil, completion: @escaping ((_ data: ApiResponse?, _ error: ErrorResponse?) -> Void)) {
        setDimmerTimerWithRequestBuilder(deviceId: deviceId, value: value, duration: duration, units: units).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/dimmers/{deviceId}/{value}/timer/{duration}
     - sets a dimmer to a specific value on a timer

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func setDimmerTimerWithRequestBuilder(deviceId: String, value: Int32, duration: Int32, units: Units_setDimmerTimer? = nil) -> RequestBuilder<ApiResponse> {
        var path = "/lighting/dimmers/{deviceId}/{value}/timer/{duration}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let durationPreEscape = "\(duration)"
        let durationPostEscape = durationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{duration}", with: durationPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "units": units?.rawValue
        ])

        let requestBuilder: RequestBuilder<ApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter value
     */
    public enum Value_setSwitch: String { 
        case on = "on"
        case off = "off"
    }

    /**
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSwitch(deviceId: String, value: Value_setSwitch, completion: @escaping ((_ data: ApiResponse?, _ error: ErrorResponse?) -> Void)) {
        setSwitchWithRequestBuilder(deviceId: deviceId, value: value).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/switches/{deviceId}/{value}

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func setSwitchWithRequestBuilder(deviceId: String, value: Value_setSwitch) -> RequestBuilder<ApiResponse> {
        var path = "/lighting/switches/{deviceId}/{value}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value.rawValue)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter value
     */
    public enum Value_setSwitchTimer: String { 
        case on = "on"
        case off = "off"
    }

    /**
     * enum for parameter units
     */
    public enum Units_setSwitchTimer: String { 
        case seconds = "seconds"
        case minutes = "minutes"
        case milliseconds = "milliseconds"
    }

    /**
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSwitchTimer(deviceId: String, value: Value_setSwitchTimer, duration: Int32, units: Units_setSwitchTimer? = nil, completion: @escaping ((_ data: ApiResponse?, _ error: ErrorResponse?) -> Void)) {
        setSwitchTimerWithRequestBuilder(deviceId: deviceId, value: value, duration: duration, units: units).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/switches/{deviceId}/{value}/timer/{duration}
     - sets a switch to a specific value on a timer

     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func setSwitchTimerWithRequestBuilder(deviceId: String, value: Value_setSwitchTimer, duration: Int32, units: Units_setSwitchTimer? = nil) -> RequestBuilder<ApiResponse> {
        var path = "/lighting/switches/{deviceId}/{value}/timer/{duration}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value.rawValue)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let durationPreEscape = "\(duration)"
        let durationPostEscape = durationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{duration}", with: durationPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "units": units?.rawValue
        ])

        let requestBuilder: RequestBuilder<ApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
