//
// WeatherAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class WeatherAPI: APIBase {
    /**
     Returns a daily forecast
     - parameter days: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getForecast(days: Int32, completion: @escaping ((_ data: ForecastResponse?, _ error: ErrorResponse?) -> Void)) {
        getForecastWithRequestBuilder(days: days).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a daily forecast
     - GET /temperature/forecast/{days}

     - examples: [{contentType=application/json, example={
  "city" : {
    "country" : "country",
    "name" : "name",
    "lon" : 1.4658129805029452,
    "id" : 0,
    "lat" : 6.027456183070403
  },
  "values" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "temperature" : {
      "temp" : 0.8008281904610115,
      "high" : 1.4658129805029452,
      "low" : 6.027456183070403,
      "night" : 7.061401241503109,
      "evening" : 2.3021358869347655,
      "day" : 5.637376656633329,
      "morning" : 5.962133916683182
    },
    "weather" : {
      "summary" : "summary",
      "icon" : "icon",
      "description" : "description"
    },
    "humidity" : 5,
    "pressure" : 5.962133916683182,
    "clouds" : 7,
    "windSpeed" : 2.3021358869347655
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "temperature" : {
      "temp" : 0.8008281904610115,
      "high" : 1.4658129805029452,
      "low" : 6.027456183070403,
      "night" : 7.061401241503109,
      "evening" : 2.3021358869347655,
      "day" : 5.637376656633329,
      "morning" : 5.962133916683182
    },
    "weather" : {
      "summary" : "summary",
      "icon" : "icon",
      "description" : "description"
    },
    "humidity" : 5,
    "pressure" : 5.962133916683182,
    "clouds" : 7,
    "windSpeed" : 2.3021358869347655
  } ]
}}]
     - parameter days: (path)  
     - returns: RequestBuilder<ForecastResponse> 
     */
    open class func getForecastWithRequestBuilder(days: Int32) -> RequestBuilder<ForecastResponse> {
        var path = "/temperature/forecast/{days}"
        let daysPreEscape = "\(days)"
        let daysPostEscape = daysPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{days}", with: daysPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ForecastResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a forecast for a specific date
     - parameter date: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getForecastForDate(date: String, completion: @escaping ((_ data: ForecastResponse?, _ error: ErrorResponse?) -> Void)) {
        getForecastForDateWithRequestBuilder(date: date).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a forecast for a specific date
     - GET /temperature/{date}/forecast

     - examples: [{contentType=application/json, example={
  "city" : {
    "country" : "country",
    "name" : "name",
    "lon" : 1.4658129805029452,
    "id" : 0,
    "lat" : 6.027456183070403
  },
  "values" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "temperature" : {
      "temp" : 0.8008281904610115,
      "high" : 1.4658129805029452,
      "low" : 6.027456183070403,
      "night" : 7.061401241503109,
      "evening" : 2.3021358869347655,
      "day" : 5.637376656633329,
      "morning" : 5.962133916683182
    },
    "weather" : {
      "summary" : "summary",
      "icon" : "icon",
      "description" : "description"
    },
    "humidity" : 5,
    "pressure" : 5.962133916683182,
    "clouds" : 7,
    "windSpeed" : 2.3021358869347655
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "temperature" : {
      "temp" : 0.8008281904610115,
      "high" : 1.4658129805029452,
      "low" : 6.027456183070403,
      "night" : 7.061401241503109,
      "evening" : 2.3021358869347655,
      "day" : 5.637376656633329,
      "morning" : 5.962133916683182
    },
    "weather" : {
      "summary" : "summary",
      "icon" : "icon",
      "description" : "description"
    },
    "humidity" : 5,
    "pressure" : 5.962133916683182,
    "clouds" : 7,
    "windSpeed" : 2.3021358869347655
  } ]
}}]
     - parameter date: (path)  
     - returns: RequestBuilder<ForecastResponse> 
     */
    open class func getForecastForDateWithRequestBuilder(date: String) -> RequestBuilder<ForecastResponse> {
        var path = "/temperature/{date}/forecast"
        let datePreEscape = "\(date)"
        let datePostEscape = datePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{date}", with: datePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ForecastResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns an hourly forecast
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHourlyForecast(completion: @escaping ((_ data: [ForecastTemperature]?, _ error: ErrorResponse?) -> Void)) {
        getHourlyForecastWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns an hourly forecast
     - GET /temperature/forecast/hourly

     - examples: [{contentType=application/json, example=[ {
  "temp" : 0.8008281904610115,
  "high" : 1.4658129805029452,
  "low" : 6.027456183070403,
  "night" : 7.061401241503109,
  "evening" : 2.3021358869347655,
  "day" : 5.637376656633329,
  "morning" : 5.962133916683182
}, {
  "temp" : 0.8008281904610115,
  "high" : 1.4658129805029452,
  "low" : 6.027456183070403,
  "night" : 7.061401241503109,
  "evening" : 2.3021358869347655,
  "day" : 5.637376656633329,
  "morning" : 5.962133916683182
} ]}]
     - returns: RequestBuilder<[ForecastTemperature]> 
     */
    open class func getHourlyForecastWithRequestBuilder() -> RequestBuilder<[ForecastTemperature]> {
        let path = "/temperature/forecast/hourly"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ForecastTemperature]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
