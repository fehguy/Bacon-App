// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }
    
    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }
        
        // Decoder for [IrrigationZone]
        Decoders.addDecoder(clazz: [IrrigationZone].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[IrrigationZone]> in
            return Decoders.decode(clazz: [IrrigationZone].self, source: source)
        }

        // Decoder for IrrigationZone
        Decoders.addDecoder(clazz: IrrigationZone.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IrrigationZone> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IrrigationZone() : instance as! IrrigationZone
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["zoneId"] as AnyObject?) {
                
                case let .success(value): _result.zoneId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): _result.state = value
                case let .failure(error): break
                
                }

                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IrrigationZone", actual: "\(source)"))
            }
        }
        
        
        // Decoder for IrrigationSummary
        Decoders.addDecoder(clazz: IrrigationSummary.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<IrrigationSummary> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? IrrigationSummary() : instance as! IrrigationSummary

                switch Decoders.decodeOptional(clazz: [IrrigationZone].self, source: sourceDictionary["zones"] as AnyObject?) {
                case let .success(value): _result.zones = value
                case let .failure(error): break
                
                }


                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "IrrigationZone", actual: "\(source)"))
            }
        }
        

        // Decoder for [ActiveTrack]
        Decoders.addDecoder(clazz: [ActiveTrack].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ActiveTrack]> in
            return Decoders.decode(clazz: [ActiveTrack].self, source: source)
        }

        // Decoder for ActiveTrack
        Decoders.addDecoder(clazz: ActiveTrack.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ActiveTrack> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ActiveTrack() : instance as! ActiveTrack
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["artist"] as AnyObject?) {
                
                case let .success(value): _result.artist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["album"] as AnyObject?) {
                
                case let .success(value): _result.album = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["albumArtURI"] as AnyObject?) {
                
                case let .success(value): _result.albumArtURI = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?) {
                
                case let .success(value): _result.duration = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?) {
                
                case let .success(value): _result.uri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["radioShowMeta"] as AnyObject?) {
                
                case let .success(value): _result.radioShowMeta = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["streamInfo"] as AnyObject?) {
                
                case let .success(value): _result.streamInfo = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ActiveTrack", actual: "\(source)"))
            }
        }
        // Decoder for [AdHocJob]
        Decoders.addDecoder(clazz: [AdHocJob].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AdHocJob]> in
            return Decoders.decode(clazz: [AdHocJob].self, source: source)
        }

        // Decoder for AdHocJob
        Decoders.addDecoder(clazz: AdHocJob.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AdHocJob> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AdHocJob() : instance as! AdHocJob
                switch Decoders.decodeOptional(clazz: [Any].self, source: sourceDictionary["now"] as AnyObject?) {
                
                case let .success(value): _result.now = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["until"] as AnyObject?) {
                
                case let .success(value): _result.until = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [Any].self, source: sourceDictionary["finally"] as AnyObject?) {
                
                case let .success(value): _result.finally = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AdHocJob", actual: "\(source)"))
            }
        }
        // Decoder for [ApiResponse]
        Decoders.addDecoder(clazz: [ApiResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiResponse]> in
            return Decoders.decode(clazz: [ApiResponse].self, source: source)
        }

        // Decoder for ApiResponse
        Decoders.addDecoder(clazz: ApiResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiResponse() : instance as! ApiResponse
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?) {
                
                case let .success(value): _result.code = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?) {
                
                case let .success(value): _result.message = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiResponse", actual: "\(source)"))
            }
        }

        // Decoder for [City]
        Decoders.addDecoder(clazz: [City].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[City]> in
            return Decoders.decode(clazz: [City].self, source: source)
        }

        // Decoder for City
        Decoders.addDecoder(clazz: City.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<City> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? City() : instance as! City
                switch Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lat"] as AnyObject?) {
                
                case let .success(value): _result.lat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lon"] as AnyObject?) {
                
                case let .success(value): _result.lon = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?) {
                
                case let .success(value): _result.country = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "City", actual: "\(source)"))
            }
        }
        // Decoder for [Device]
        Decoders.addDecoder(clazz: [Device].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Device]> in
            return Decoders.decode(clazz: [Device].self, source: source)
        }

        // Decoder for Device
        Decoders.addDecoder(clazz: Device.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Device> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Device() : instance as! Device
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): _result.url = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?) {
                
                case let .success(value): _result.deviceId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["addedAt"] as AnyObject?) {
                
                case let .success(value): _result.addedAt = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["token"] as AnyObject?) {
                
                case let .success(value): _result.token = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Device", actual: "\(source)"))
            }
        }

        // Decoder for [DeviceNotification]
        Decoders.addDecoder(clazz: [DeviceNotification].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[DeviceNotification]> in
            return Decoders.decode(clazz: [DeviceNotification].self, source: source)
        }

        // Decoder for DeviceNotification
        Decoders.addDecoder(clazz: DeviceNotification.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<DeviceNotification> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? DeviceNotification() : instance as! DeviceNotification
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?) {
                
                case let .success(value): _result.deviceId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notificationType"] as AnyObject?) {
                
                case let .success(value): _result.notificationType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "DeviceNotification", actual: "\(source)"))
            }
        }
        // Decoder for [DeviceRegistrationInfo]
        Decoders.addDecoder(clazz: [DeviceRegistrationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[DeviceRegistrationInfo]> in
            return Decoders.decode(clazz: [DeviceRegistrationInfo].self, source: source)
        }

        // Decoder for DeviceRegistrationInfo
        Decoders.addDecoder(clazz: DeviceRegistrationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<DeviceRegistrationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? DeviceRegistrationInfo() : instance as! DeviceRegistrationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): _result.url = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["types"] as AnyObject?) {
                
                case let .success(value): _result.types = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "DeviceRegistrationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [DeviceState]
        Decoders.addDecoder(clazz: [DeviceState].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[DeviceState]> in
            return Decoders.decode(clazz: [DeviceState].self, source: source)
        }

        // Decoder for DeviceState
        Decoders.addDecoder(clazz: DeviceState.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<DeviceState> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? DeviceState() : instance as! DeviceState
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["lastUpdate"] as AnyObject?) {
                
                case let .success(value): _result.lastUpdate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["level"] as AnyObject?) {
                
                case let .success(value): _result.level = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "DeviceState", actual: "\(source)"))
            }
        }
        // Decoder for [Event]
        Decoders.addDecoder(clazz: [Event].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Event]> in
            return Decoders.decode(clazz: [Event].self, source: source)
        }

        // Decoder for Event
        Decoders.addDecoder(clazz: Event.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Event> in
            if let source = source as? Event {
                return .success(source)
            } else {
                return .failure(.typeMismatch(expected: "Typealias Event", actual: "\(source)"))
            }
        }
        // Decoder for [FavoriteChannel]
        Decoders.addDecoder(clazz: [FavoriteChannel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[FavoriteChannel]> in
            return Decoders.decode(clazz: [FavoriteChannel].self, source: source)
        }

        // Decoder for FavoriteChannel
        Decoders.addDecoder(clazz: FavoriteChannel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<FavoriteChannel> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? FavoriteChannel() : instance as! FavoriteChannel
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["albumArtURI"] as AnyObject?) {
                
                case let .success(value): _result.albumArtURI = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?) {
                
                case let .success(value): _result.uri = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "FavoriteChannel", actual: "\(source)"))
            }
        }
        // Decoder for [Forecast]
        Decoders.addDecoder(clazz: [Forecast].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Forecast]> in
            return Decoders.decode(clazz: [Forecast].self, source: source)
        }

        // Decoder for Forecast
        Decoders.addDecoder(clazz: Forecast.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Forecast> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Forecast() : instance as! Forecast
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?) {
                
                case let .success(value): _result.date = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["pressure"] as AnyObject?) {
                
                case let .success(value): _result.pressure = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["humidity"] as AnyObject?) {
                
                case let .success(value): _result.humidity = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["windSpeed"] as AnyObject?) {
                
                case let .success(value): _result.windSpeed = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["clouds"] as AnyObject?) {
                
                case let .success(value): _result.clouds = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: ForecastTemperature.self, source: sourceDictionary["temperature"] as AnyObject?) {
                
                case let .success(value): _result.temperature = value
                case let .failure(error): break
                
                }
                
                switch Decoders.decodeOptional(clazz: WeatherForecast.self, source: sourceDictionary["weather"] as AnyObject?) {
                
                case let .success(value): _result.weather = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Forecast", actual: "\(source)"))
            }
        }
        // Decoder for [ForecastResponse]
        Decoders.addDecoder(clazz: [ForecastResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ForecastResponse]> in
            return Decoders.decode(clazz: [ForecastResponse].self, source: source)
        }

        
        // Decoder for ForecastResponse
        Decoders.addDecoder(clazz: ForecastResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ForecastResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ForecastResponse() : instance as! ForecastResponse
                switch Decoders.decodeOptional(clazz: City.self, source: sourceDictionary["city"] as AnyObject?) {
                
                case let .success(value): _result.city = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [Forecast].self, source: sourceDictionary["values"] as AnyObject?) {
                
                case let .success(value): _result.values = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ForecastResponse", actual: "\(source)"))
            }
        }
        // Decoder for [ForecastTemperature]
        Decoders.addDecoder(clazz: [ForecastTemperature].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ForecastTemperature]> in
            return Decoders.decode(clazz: [ForecastTemperature].self, source: source)
        }

        // Decoder for ForecastTemperature
        Decoders.addDecoder(clazz: ForecastTemperature.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ForecastTemperature> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ForecastTemperature() : instance as! ForecastTemperature
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["temp"] as AnyObject?) {
                
                case let .success(value): _result.temp = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["low"] as AnyObject?) {
                
                case let .success(value): _result.low = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["high"] as AnyObject?) {
                
                case let .success(value): _result.high = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["morning"] as AnyObject?) {
                
                case let .success(value): _result.morning = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["day"] as AnyObject?) {
                
                case let .success(value): _result.day = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["evening"] as AnyObject?) {
                
                case let .success(value): _result.evening = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["night"] as AnyObject?) {
                
                case let .success(value): _result.night = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ForecastTemperature", actual: "\(source)"))
            }
        }
        // Decoder for [HeaterState]
        Decoders.addDecoder(clazz: [HeaterState].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[HeaterState]> in
            return Decoders.decode(clazz: [HeaterState].self, source: source)
        }

        // Decoder for HeaterState
        Decoders.addDecoder(clazz: HeaterState.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<HeaterState> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? HeaterState() : instance as! HeaterState
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): _result.state = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "HeaterState", actual: "\(source)"))
            }
        }
        // Decoder for [LightingSummary]
        Decoders.addDecoder(clazz: [LightingSummary].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[LightingSummary]> in
            return Decoders.decode(clazz: [LightingSummary].self, source: source)
        }

        // Decoder for LightingSummary
        Decoders.addDecoder(clazz: LightingSummary.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<LightingSummary> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? LightingSummary() : instance as! LightingSummary
                switch Decoders.decodeOptional(clazz: [LightingZone].self, source: sourceDictionary["zones"] as AnyObject?) {
                
                case let .success(value): _result.zones = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [LightingZoneStatus].self, source: sourceDictionary["zoneStatus"] as AnyObject?) {
                
                case let .success(value): _result.zoneStatus = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "LightingSummary", actual: "\(source)"))
            }
        }
        // Decoder for [LightingZone]
        Decoders.addDecoder(clazz: [LightingZone].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[LightingZone]> in
            return Decoders.decode(clazz: [LightingZone].self, source: source)
        }

        // Decoder for LightingZone
        Decoders.addDecoder(clazz: LightingZone.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<LightingZone> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? LightingZone() : instance as! LightingZone
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["deviceId"] as AnyObject?) {
                
                case let .success(value): _result.deviceId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: LightingZone.DeviceType.self, source: sourceDictionary["deviceType"] as AnyObject?) {
                
                case let .success(value): _result.deviceType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zone"] as AnyObject?) {
                
                case let .success(value): _result.zone = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["rooms"] as AnyObject?) {
                
                case let .success(value): _result.rooms = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "LightingZone", actual: "\(source)"))
            }
        }
        // Decoder for [LightingZoneStatus]
        Decoders.addDecoder(clazz: [LightingZoneStatus].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[LightingZoneStatus]> in
            return Decoders.decode(clazz: [LightingZoneStatus].self, source: source)
        }

        // Decoder for LightingZoneStatus
        Decoders.addDecoder(clazz: LightingZoneStatus.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<LightingZoneStatus> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? LightingZoneStatus() : instance as! LightingZoneStatus
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["lastUpdate"] as AnyObject?) {
                
                case let .success(value): _result.lastUpdate = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level"] as AnyObject?) {
                
                case let .success(value): _result.level = value
                case let .failure(error):
                    switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["level"] as AnyObject?) {
                        
                    case let .success(value): _result.level = String(describing: value!)
                    case let .failure(error):
                        
                        break
                        
                    }
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zone"] as AnyObject?) {
                
                case let .success(value): _result.zone = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["rooms"] as AnyObject?) {
                
                case let .success(value): _result.rooms = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "LightingZoneStatus", actual: "\(source)"))
            }
        }
        // Decoder for [RunningItem]
        Decoders.addDecoder(clazz: [RunningItem].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[RunningItem]> in
            return Decoders.decode(clazz: [RunningItem].self, source: source)
        }

        // Decoder for RunningItem
        Decoders.addDecoder(clazz: RunningItem.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<RunningItem> in
            if let source = source as? RunningItem {
                return .success(source)
            } else {
                return .failure(.typeMismatch(expected: "Typealias RunningItem", actual: "\(source)"))
            }
        }
        // Decoder for [Schedule]
        Decoders.addDecoder(clazz: [Schedule].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Schedule]> in
            return Decoders.decode(clazz: [Schedule].self, source: source)
        }

        // Decoder for Schedule
        Decoders.addDecoder(clazz: Schedule.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Schedule> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Schedule() : instance as! Schedule
                switch Decoders.decodeOptional(clazz: [Any].self, source: sourceDictionary["when"] as AnyObject?) {
                
                case let .success(value): _result.when = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [Any].self, source: sourceDictionary["then"] as AnyObject?) {
                
                case let .success(value): _result.then = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["until"] as AnyObject?) {
                
                case let .success(value): _result.until = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [Any].self, source: sourceDictionary["finally"] as AnyObject?) {
                
                case let .success(value): _result.finally = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Schedule", actual: "\(source)"))
            }
        }
        // Decoder for [Sensor]
        Decoders.addDecoder(clazz: [Sensor].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Sensor]> in
            return Decoders.decode(clazz: [Sensor].self, source: source)
        }

        // Decoder for Sensor
        Decoders.addDecoder(clazz: Sensor.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Sensor> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Sensor() : instance as! Sensor
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["zones"] as AnyObject?) {
                
                case let .success(value): _result.zones = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Sensor.ModelType.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["rooms"] as AnyObject?) {
                
                case let .success(value): _result.rooms = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Sensor", actual: "\(source)"))
            }
        }

        // Decoder for [SensorStatus]
        Decoders.addDecoder(clazz: [SensorStatus].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SensorStatus]> in
            return Decoders.decode(clazz: [SensorStatus].self, source: source)
        }

        // Decoder for SensorStatus
        Decoders.addDecoder(clazz: SensorStatus.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SensorStatus> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SensorStatus() : instance as! SensorStatus
                if decoders["\(Sensor.self)"] != nil {
                  _ = Decoders.decode(clazz: Sensor.self, source: source, instance: _result)
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["zones"] as AnyObject?) {
                
                case let .success(value): _result.zones = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SensorStatus.ModelType.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["rooms"] as AnyObject?) {
                
                case let .success(value): _result.rooms = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SensorStatus.State.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): _result.state = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SensorStatus", actual: "\(source)"))
            }
        }
        // Decoder for [SoundSummary]
        Decoders.addDecoder(clazz: [SoundSummary].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SoundSummary]> in
            return Decoders.decode(clazz: [SoundSummary].self, source: source)
        }

        // Decoder for SoundSummary
        Decoders.addDecoder(clazz: SoundSummary.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SoundSummary> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SoundSummary() : instance as! SoundSummary
                switch Decoders.decodeOptional(clazz: [SoundZone].self, source: sourceDictionary["zones"] as AnyObject?) {
                
                case let .success(value): _result.zones = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultZone"] as AnyObject?) {
                
                case let .success(value): _result.defaultZone = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SoundSummary", actual: "\(source)"))
            }
        }
        // Decoder for [SoundZone]
        Decoders.addDecoder(clazz: [SoundZone].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SoundZone]> in
            return Decoders.decode(clazz: [SoundZone].self, source: source)
        }

        // Decoder for SoundZone
        Decoders.addDecoder(clazz: SoundZone.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SoundZone> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SoundZone() : instance as! SoundZone
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"] as AnyObject?) {
                
                case let .success(value): _result.address = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["zoneType"] as AnyObject?) {
                
                case let .success(value): _result.zoneType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SoundZone", actual: "\(source)"))
            }
        }
        // Decoder for [SoundZoneStatus]
        Decoders.addDecoder(clazz: [SoundZoneStatus].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SoundZoneStatus]> in
            return Decoders.decode(clazz: [SoundZoneStatus].self, source: source)
        }
        
        // Decoder for SoundZoneStatus
        Decoders.addDecoder(clazz: SoundZoneStatus.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SoundZoneStatus> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SoundZoneStatus() : instance as! SoundZoneStatus
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                    
                case let .success(value): _result.id = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                    
                case let .success(value): _result.name = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"] as AnyObject?) {
                    
                case let .success(value): _result.address = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: ActiveTrack.self, source: sourceDictionary["currentTrack"] as AnyObject?) {
                    
                case let .success(value): _result.currentTrack = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?) {
                    
                case let .success(value): _result.status = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["volume"] as AnyObject?) {
                    
                case let .success(value): _result.volume = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentPlayMode"] as AnyObject?) {
                    
                case let .success(value): _result.currentPlayMode = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Track.self, source: sourceDictionary["nextTrack"] as AnyObject?) {
                    
                case let .success(value): _result.nextTrack = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["relTime"] as AnyObject?) {
                    
                case let .success(value): _result.relTime = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["stateTime"] as AnyObject?) {
                    
                case let .success(value): _result.stateTime = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["mute"] as AnyObject?) {
                    
                case let .success(value): _result.mute = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["trackNo"] as AnyObject?) {
                    
                case let .success(value): _result.trackNo = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentState"] as AnyObject?) {
                    
                case let .success(value): _result.currentState = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zone"] as AnyObject?) {
                    
                case let .success(value): _result.zone = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["rooms"] as AnyObject?) {
                    
                case let .success(value): _result.rooms = value
                case let .failure(error): break
                    
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SoundZoneStatus", actual: "\(source)"))
            }
        }
        // Decoder for [TemperatueZoneStatus]
        Decoders.addDecoder(clazz: [TemperatueZoneStatus].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TemperatueZoneStatus]> in
            return Decoders.decode(clazz: [TemperatueZoneStatus].self, source: source)
        }
        
        // Decoder for TemperatueZoneStatus
        Decoders.addDecoder(clazz: TemperatueZoneStatus.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TemperatueZoneStatus> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TemperatueZoneStatus() : instance as! TemperatueZoneStatus
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                    
                case let .success(value): _result.id = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                    
                case let .success(value): _result.name = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?) {
                    
                case let .success(value): _result.value = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: TemperatueZoneStatus.Heater.self, source: sourceDictionary["heater"] as AnyObject?) {
                    
                case let .success(value): _result.heater = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: TemperatueZoneStatus.Units.self, source: sourceDictionary["units"] as AnyObject?) {
                    
                case let .success(value): _result.units = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["timestamp"] as AnyObject?) {
                    
                case let .success(value): _result.timestamp = value
                case let .failure(error): break
                    
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["rooms"] as AnyObject?) {
                    
                case let .success(value): _result.rooms = value
                case let .failure(error): break
                    
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TemperatueZoneStatus", actual: "\(source)"))
            }
        }
        
        // Decoder for [TemperatureSummary]
        Decoders.addDecoder(clazz: [TemperatureSummary].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TemperatureSummary]> in
            return Decoders.decode(clazz: [TemperatureSummary].self, source: source)
        }

        // Decoder for TemperatureSummary
        Decoders.addDecoder(clazz: TemperatureSummary.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TemperatureSummary> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TemperatureSummary() : instance as! TemperatureSummary
                switch Decoders.decodeOptional(clazz: [TemperatureZone].self, source: sourceDictionary["zones"] as AnyObject?) {
                
                case let .success(value): _result.zones = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [TemperatueZoneStatus].self, source: sourceDictionary["zoneStatus"] as AnyObject?) {
                
                case let .success(value): _result.zoneStatus = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TemperatureSummary", actual: "\(source)"))
            }
        }
        // Decoder for [TemperatureZone]
        Decoders.addDecoder(clazz: [TemperatureZone].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TemperatureZone]> in
            return Decoders.decode(clazz: [TemperatureZone].self, source: source)
        }

        // Decoder for TemperatureZone
        Decoders.addDecoder(clazz: TemperatureZone.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TemperatureZone> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TemperatureZone() : instance as! TemperatureZone
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inputPosition"] as AnyObject?) {
                
                case let .success(value): _result.inputPosition = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outputPosition"] as AnyObject?) {
                
                case let .success(value): _result.outputPosition = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zone"] as AnyObject?) {
                
                case let .success(value): _result.zone = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TemperatureZone", actual: "\(source)"))
            }
        }
        // Decoder for [Track]
        Decoders.addDecoder(clazz: [Track].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Track]> in
            return Decoders.decode(clazz: [Track].self, source: source)
        }

        // Decoder for Track
        Decoders.addDecoder(clazz: Track.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Track> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Track() : instance as! Track
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?) {
                
                case let .success(value): _result.uri = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["albumArtURI"] as AnyObject?) {
                
                case let .success(value): _result.albumArtURI = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["artist"] as AnyObject?) {
                
                case let .success(value): _result.artist = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["album"] as AnyObject?) {
                
                case let .success(value): _result.album = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Track", actual: "\(source)"))
            }
        }
        // Decoder for [WeatherForecast]
        Decoders.addDecoder(clazz: [WeatherForecast].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[WeatherForecast]> in
            return Decoders.decode(clazz: [WeatherForecast].self, source: source)
        }

        // Decoder for WeatherForecast
        Decoders.addDecoder(clazz: WeatherForecast.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<WeatherForecast> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? WeatherForecast() : instance as! WeatherForecast
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"] as AnyObject?) {
                
                case let .success(value): _result.summary = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"] as AnyObject?) {
                
                case let .success(value): _result.icon = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "WeatherForecast", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
