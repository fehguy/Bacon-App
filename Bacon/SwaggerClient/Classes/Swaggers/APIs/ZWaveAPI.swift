//
// ZWaveAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ZWaveAPI {
    /**

     - parameter filter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLightingSummary(filter: String? = nil, completion: @escaping ((_ data: LightingSummary?,_ error: Error?) -> Void)) {
        getLightingSummaryWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /lightingSummary
     - examples: [{contentType=application/json, example={}}]
     
     - parameter filter: (query)  (optional)

     - returns: RequestBuilder<LightingSummary> 
     */
    open class func getLightingSummaryWithRequestBuilder(filter: String? = nil) -> RequestBuilder<LightingSummary> {
        let path = "/lightingSummary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter
        ])

        let requestBuilder: RequestBuilder<LightingSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deviceId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSwitchState(deviceId: String, completion: @escaping ((_ data: DeviceState?,_ error: Error?) -> Void)) {
        getSwitchStateWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /lighting/switches/{deviceId}
     - examples: [{contentType=application/json, example={}}]
     
     - parameter deviceId: (path)  

     - returns: RequestBuilder<DeviceState> 
     */
    open class func getSwitchStateWithRequestBuilder(deviceId: String) -> RequestBuilder<DeviceState> {
        var path = "/lighting/switches/{deviceId}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeviceState>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setDimmer(deviceId: String, value: Int, completion: @escaping ((_ data: ApiResponse2?,_ error: Error?) -> Void)) {
        setDimmerWithRequestBuilder(deviceId: deviceId, value: value).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/dimmers/{deviceId}/{value}
     - examples: [{contentType=application/json, example={}}]
     
     - parameter deviceId: (path)  
     - parameter value: (path)  

     - returns: RequestBuilder<ApiResponse2> 
     */
    open class func setDimmerWithRequestBuilder(deviceId: String, value: Int) -> RequestBuilder<ApiResponse2> {
        var path = "/lighting/dimmers/{deviceId}/{value}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponse2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter units
     */
    public enum Units_setDimmerTimer: String { 
        case seconds = "seconds"
        case minutes = "minutes"
        case milliseconds = "milliseconds"
    }

    /**

     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setDimmerTimer(deviceId: String, value: Int, duration: Int, units: Units_setDimmerTimer? = nil, completion: @escaping ((_ data: ApiResponse2?,_ error: Error?) -> Void)) {
        setDimmerTimerWithRequestBuilder(deviceId: deviceId, value: value, duration: duration, units: units).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/dimmers/{deviceId}/{value}/timer/{duration}
     - sets a dimmer to a specific value on a timer
     - examples: [{contentType=application/json, example={}}]
     
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)

     - returns: RequestBuilder<ApiResponse2> 
     */
    open class func setDimmerTimerWithRequestBuilder(deviceId: String, value: Int, duration: Int, units: Units_setDimmerTimer? = nil) -> RequestBuilder<ApiResponse2> {
        var path = "/lighting/dimmers/{deviceId}/{value}/timer/{duration}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let durationPreEscape = "\(duration)"
        let durationPostEscape = durationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{duration}", with: durationPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "units": units?.rawValue
        ])

        let requestBuilder: RequestBuilder<ApiResponse2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter value
     */
    public enum Value_setSwitch: String { 
        case on = "on"
        case off = "off"
    }

    /**

     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSwitch(deviceId: String, value: Value_setSwitch, completion: @escaping ((_ data: ApiResponse2?,_ error: Error?) -> Void)) {
        setSwitchWithRequestBuilder(deviceId: deviceId, value: value).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/switches/{deviceId}/{value}
     - examples: [{contentType=application/json, example={}}]
     
     - parameter deviceId: (path)  
     - parameter value: (path)  

     - returns: RequestBuilder<ApiResponse2> 
     */
    open class func setSwitchWithRequestBuilder(deviceId: String, value: Value_setSwitch) -> RequestBuilder<ApiResponse2> {
        var path = "/lighting/switches/{deviceId}/{value}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value.rawValue)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponse2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter value
     */
    public enum Value_setSwitchTimer: String { 
        case on = "on"
        case off = "off"
    }

    /**
     * enum for parameter units
     */
    public enum Units_setSwitchTimer: String { 
        case seconds = "seconds"
        case minutes = "minutes"
        case milliseconds = "milliseconds"
    }

    /**

     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSwitchTimer(deviceId: String, value: Value_setSwitchTimer, duration: Int, units: Units_setSwitchTimer? = nil, completion: @escaping ((_ data: ApiResponse2?,_ error: Error?) -> Void)) {
        setSwitchTimerWithRequestBuilder(deviceId: deviceId, value: value, duration: duration, units: units).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /lighting/switches/{deviceId}/{value}/timer/{duration}
     - sets a switch to a specific value on a timer
     - examples: [{contentType=application/json, example={}}]
     
     - parameter deviceId: (path)  
     - parameter value: (path)  
     - parameter duration: (path) duration for timer to execute 
     - parameter units: (query)  (optional, default to milliseconds)

     - returns: RequestBuilder<ApiResponse2> 
     */
    open class func setSwitchTimerWithRequestBuilder(deviceId: String, value: Value_setSwitchTimer, duration: Int, units: Units_setSwitchTimer? = nil) -> RequestBuilder<ApiResponse2> {
        var path = "/lighting/switches/{deviceId}/{value}/timer/{duration}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(value.rawValue)"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let durationPreEscape = "\(duration)"
        let durationPostEscape = durationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{duration}", with: durationPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "units": units?.rawValue
        ])

        let requestBuilder: RequestBuilder<ApiResponse2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
