//
// WeatherAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class WeatherAPI {
    /**
     Returns a weather forecast from DarkSky.net
     
     - parameter pastHours: (query)  (optional, default to 0)
     - parameter futureHours: (query)  (optional, default to 48)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDarkSkyWeather(pastHours: Int? = nil, futureHours: Int? = nil, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        getDarkSkyWeatherWithRequestBuilder(pastHours: pastHours, futureHours: futureHours).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a weather forecast from DarkSky.net
     - GET /temperature/forecast/darksky
     - examples: [{contentType=application/json, example={
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter pastHours: (query)  (optional, default to 0)
     - parameter futureHours: (query)  (optional, default to 48)

     - returns: RequestBuilder<JSONValue> 
     */
    open class func getDarkSkyWeatherWithRequestBuilder(pastHours: Int? = nil, futureHours: Int? = nil) -> RequestBuilder<JSONValue> {
        let path = "/temperature/forecast/darksky"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pastHours": pastHours?.encodeToJSON(), 
            "futureHours": futureHours?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a daily forecast
     
     - parameter days: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getForecast(days: Int, completion: @escaping ((_ data: ForecastResponse?,_ error: Error?) -> Void)) {
        getForecastWithRequestBuilder(days: days).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a daily forecast
     - GET /temperature/forecast/{days}
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter days: (path)  

     - returns: RequestBuilder<ForecastResponse> 
     */
    open class func getForecastWithRequestBuilder(days: Int) -> RequestBuilder<ForecastResponse> {
        var path = "/temperature/forecast/{days}"
        let daysPreEscape = "\(days)"
        let daysPostEscape = daysPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{days}", with: daysPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ForecastResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a forecast for a specific date
     
     - parameter date: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getForecastForDate(date: String, completion: @escaping ((_ data: ForecastResponse?,_ error: Error?) -> Void)) {
        getForecastForDateWithRequestBuilder(date: date).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a forecast for a specific date
     - GET /temperature/{date}/forecast
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter date: (path)  

     - returns: RequestBuilder<ForecastResponse> 
     */
    open class func getForecastForDateWithRequestBuilder(date: String) -> RequestBuilder<ForecastResponse> {
        var path = "/temperature/{date}/forecast"
        let datePreEscape = "\(date)"
        let datePostEscape = datePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{date}", with: datePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ForecastResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns an hourly forecast
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHourlyForecast(completion: @escaping ((_ data: [ForecastTemperature]?,_ error: Error?) -> Void)) {
        getHourlyForecastWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns an hourly forecast
     - GET /temperature/forecast/hourly
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[ForecastTemperature]> 
     */
    open class func getHourlyForecastWithRequestBuilder() -> RequestBuilder<[ForecastTemperature]> {
        let path = "/temperature/forecast/hourly"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ForecastTemperature]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
