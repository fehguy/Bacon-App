//
// SoundAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SoundAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFavorites(completion: @escaping ((_ data: [FavoriteChannel]?,_ error: Error?) -> Void)) {
        getFavoritesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos/favorites
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[FavoriteChannel]> 
     */
    open class func getFavoritesWithRequestBuilder() -> RequestBuilder<[FavoriteChannel]> {
        let path = "/sonos/favorites"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[FavoriteChannel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlayLists(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getPlayListsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /sonos/playLists

     - returns: RequestBuilder<Void> 
     */
    open class func getPlayListsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/sonos/playLists"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlayerVolume(playerId: String, completion: @escaping ((_ data: PlayerVolume?,_ error: Error?) -> Void)) {
        getPlayerVolumeWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos/{playerId}/volume
     - gets player volume
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter playerId: (path)  

     - returns: RequestBuilder<PlayerVolume> 
     */
    open class func getPlayerVolumeWithRequestBuilder(playerId: String) -> RequestBuilder<PlayerVolume> {
        var path = "/sonos/{playerId}/volume"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PlayerVolume>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter updown
     */
    public enum Updown_incrementVolume: Int { 
        case number1 = -1
        case _1 = 1
    }

    /**

     - parameter playerId: (path)  
     - parameter updown: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func incrementVolume(playerId: String, updown: Updown_incrementVolume, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        incrementVolumeWithRequestBuilder(playerId: playerId, updown: updown).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/incrementVolume/{updown}
     - incremental player volume
     
     - parameter playerId: (path)  
     - parameter updown: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func incrementVolumeWithRequestBuilder(playerId: String, updown: Updown_incrementVolume) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/incrementVolume/{updown}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let updownPreEscape = "\(updown.rawValue)"
        let updownPostEscape = updownPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{updown}", with: updownPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nextTrack(playerId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        nextTrackWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/next
     - move to next track
     
     - parameter playerId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func nextTrackWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/next"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pausePlayer(playerId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pausePlayerWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/pause
     - pause a player
     
     - parameter playerId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func pausePlayerWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/pause"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter favorite: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func playFavorite(playerId: String, favorite: FavoriteChannel, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        playFavoriteWithRequestBuilder(playerId: playerId, favorite: favorite).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/favorites
     
     - parameter playerId: (path)  
     - parameter favorite: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func playFavoriteWithRequestBuilder(playerId: String, favorite: FavoriteChannel) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/favorites"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: favorite)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func playerStatus(playerId: String, completion: @escaping ((_ data: SoundZoneStatus?,_ error: Error?) -> Void)) {
        playerStatusWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos/{playerId}
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter playerId: (path)  

     - returns: RequestBuilder<SoundZoneStatus> 
     */
    open class func playerStatusWithRequestBuilder(playerId: String) -> RequestBuilder<SoundZoneStatus> {
        var path = "/sonos/{playerId}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SoundZoneStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func previousTrack(playerId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        previousTrackWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/back
     - move to previous track
     
     - parameter playerId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func previousTrackWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/back"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resumePlayer(playerId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resumePlayerWithRequestBuilder(playerId: playerId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/resume
     - resume a player
     
     - parameter playerId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func resumePlayerWithRequestBuilder(playerId: String) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/resume"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter seconds: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func seek(playerId: String, seconds: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        seekWithRequestBuilder(playerId: playerId, seconds: seconds).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/seek/{seconds}
     - move to next track
     
     - parameter playerId: (path)  
     - parameter seconds: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func seekWithRequestBuilder(playerId: String, seconds: Int) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/seek/{seconds}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let secondsPreEscape = "\(seconds)"
        let secondsPostEscape = secondsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{seconds}", with: secondsPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter volume: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setPlayerVolume(playerId: String, volume: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setPlayerVolumeWithRequestBuilder(playerId: playerId, volume: volume).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/volume/{volume}
     - sets player volume
     
     - parameter playerId: (path)  
     - parameter volume: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func setPlayerVolumeWithRequestBuilder(playerId: String, volume: Int) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/volume/{volume}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let volumePreEscape = "\(volume)"
        let volumePostEscape = volumePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{volume}", with: volumePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter playerId: (path)  
     - parameter minutes: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sleepPlayer(playerId: String, minutes: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sleepPlayerWithRequestBuilder(playerId: playerId, minutes: minutes).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /sonos/{playerId}/sleep/{minutes}
     - puts a player to sleep
     
     - parameter playerId: (path)  
     - parameter minutes: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func sleepPlayerWithRequestBuilder(playerId: String, minutes: Int) -> RequestBuilder<Void> {
        var path = "/sonos/{playerId}/sleep/{minutes}"
        let playerIdPreEscape = "\(playerId)"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let minutesPreEscape = "\(minutes)"
        let minutesPostEscape = minutesPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minutes}", with: minutesPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func soundSummary(completion: @escaping ((_ data: [SoundZoneStatus]?,_ error: Error?) -> Void)) {
        soundSummaryWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /sonos
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[SoundZoneStatus]> 
     */
    open class func soundSummaryWithRequestBuilder() -> RequestBuilder<[SoundZoneStatus]> {
        let path = "/sonos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SoundZoneStatus]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
